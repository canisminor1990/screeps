'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (_ref) {
  var template = _ref.template,
      types = _ref.types;

  return {
    visitor: {
      Program: function Program(programPath, state) {
        var ignoreFilenames = void 0;

        if (state.opts.ignoreFilenames) {
          ignoreFilenames = new RegExp(state.opts.ignoreFilenames.join('|'), 'gi');
        } else {
          ignoreFilenames = undefined;
        }

        var globalOptions = {
          visitedKey: 'transform-react-remove-prop-types' + Date.now(),
          wrapperIfTemplate: template('\n            if (process.env.NODE_ENV !== "production") {\n              NODE;\n            }\n          '),
          mode: state.opts.mode || 'remove',
          ignoreFilenames: ignoreFilenames,
          types: types
        };

        // On program start, do an explicit traversal up front for this plugin.
        programPath.traverse({
          ObjectProperty: {
            exit: function exit(path) {
              var node = path.node;

              if (node.computed || node.key.name !== 'propTypes') {
                return;
              }

              var parent = path.findParent(function (currentNode) {
                if (currentNode.type !== 'CallExpression') {
                  return false;
                }

                return currentNode.get('callee').matchesPattern('React.createClass');
              });

              if (parent) {
                (0, _remove2.default)(path, globalOptions, {
                  type: 'createClass'
                });
              }
            }
          },
          // Here to support stage-1 transform-class-properties.
          ClassProperty: function ClassProperty(path) {
            var node = path.node,
                scope = path.scope;


            if (node.key.name === 'propTypes') {
              var pathClassDeclaration = scope.path;

              if (isReactClass(pathClassDeclaration.get('superClass'), scope)) {
                (0, _remove2.default)(path, globalOptions, {
                  type: 'class static',
                  pathClassDeclaration: pathClassDeclaration
                });
              }
            }
          },
          AssignmentExpression: function AssignmentExpression(path) {
            var node = path.node,
                scope = path.scope;


            if (node.left.computed || !node.left.property || node.left.property.name !== 'propTypes') {
              return;
            }

            var className = node.left.object.name;
            var binding = scope.getBinding(className);

            if (!binding) {
              return;
            }

            if (binding.path.isClassDeclaration()) {
              var superClass = binding.path.get('superClass');

              if (isReactClass(superClass, scope)) {
                (0, _remove2.default)(path, globalOptions, {
                  type: 'class assign'
                });
              }
            } else if ((0, _isStatelessComponent2.default)(binding.path)) {
              (0, _remove2.default)(path, globalOptions, {
                type: 'stateless'
              });
            }
          }
        });
      }
    }
  };
};

var _isStatelessComponent = require('./isStatelessComponent');

var _isStatelessComponent2 = _interopRequireDefault(_isStatelessComponent);

var _remove = require('./remove');

var _remove2 = _interopRequireDefault(_remove);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//  weak

function isPathReactClass(path) {
  if (path.matchesPattern('React.Component') || path.matchesPattern('React.PureComponent')) {
    return true;
  }

  if (path.node && (path.node.name === 'Component' || path.node.name === 'PureComponent')) {
    return true;
  }

  return false;
}

function isReactClass(superClass, scope) {
  var answer = false;

  if (isPathReactClass(superClass)) {
    answer = true;
  } else if (superClass.node.name) {
    // Check for inheritance
    var className = superClass.node.name;
    var binding = scope.getBinding(className);
    if (!binding) {
      answer = false;
    } else {
      superClass = binding.path.get('superClass');

      if (isPathReactClass(superClass)) {
        answer = true;
      }
    }
  }

  return answer;
}