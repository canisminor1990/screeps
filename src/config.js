'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const _ME = _(Game.rooms)
  .map('controller')
  .filter('my')
  .map('owner.username')
  .first();
exports.default = {
  ME: _ME,
  CHATTY: false,
  HONK: true,
  OOPS: true,
  SAY_ASSIGNMENT: true,
  SAY_PUBLIC: false,
  DEBUG: true,
  DEBUG_STACKS: false,
  TRACE: false,
  PROFILE: false,
  PROFILING: {
    ANALYZE_LIMIT: 2,
    AVERAGE_USAGE: false,
    BASIC_ONLY: true,
    BEHAVIOUR: false,
    CREEPS: false,
    CREEP_TYPE: '',
    EXECUTE_LIMIT: 5,
    FLAGS: false,
    FLUSH_LIMIT: 5,
    MAIN: true,
    MIN_THRESHOLD: 0.5,
    REGISTER_LIMIT: 2,
    ROOMS: false,
    VISUALS: false,
    VISUALS_LIMIT: 0.2,
  },
  TRAVELER_STUCK_TICKS: 2,
  TRAVELER_THRESHOLD: 5,
  USE_UNBUILT_ROADS: true,
  GRAFANA: true,
  GRAFANA_INTERVAL: 3,
  CENSUS_ANNOUNCEMENTS: true,
  SELL_NOTIFICATION: true,
  SPAWN_INTERVAL: 5,
  ROOM_VISUALS: true,
  ROOM_VISUALS_ALL: false,
  VISUALS: {
    VISIBLE_ONLY: false,
    ROOM: true,
    ROOM_GLOBAL: true,
    INFO_PIE_CHART: false,
    CPU: true,
    ROOM_ORDERS: true,
    ROOM_OFFERS: true,
    SPAWN: true,
    CONTROLLER: true,
    STORAGE: true,
    TERMINAL: true,
    TOWER: true,
    TRANSACTIONS: true,
    LABS: true,
    MINERAL: true,
    SOURCE: true,
    CREEP: true,
    WALL: false,
    RAMPART: false,
    ROAD: false,
    HEATMAP: false,
    HEATMAP_INTERVAL: 2,
    ACTION_ASSIGNMENT: true,
  },
  SEMI_AUTOMATIC_CONSTRUCTION: true,
  REMOVE_CONSTRUCTION_FLAG: true,
  MAX_STORAGE_ENERGY: {
    1: 2000,
    2: 2000,
    3: 2000,
    4: 5000,
    5: 10000,
    6: 25000,
    7: 50000,
    8: 300000,
  },
  MIN_STORAGE_ENERGY: {
    1: 1000,
    2: 1000,
    3: 1000,
    4: 1000,
    5: 5000,
    6: 10000,
    7: 25000,
    8: 50000,
  },
  MAX_STORAGE_MINERAL: 200000,
  ROOM_TRADING: true,
  FILL_POWERSPAWN: true,
  MIN_MINERAL_SELL_AMOUNT: 20000,
  ENERGY_VALUE_CREDITS: 0.05,
  TERMINAL_ENERGY: 100000,
  ENERGY_BALANCE_TRANSFER_AMOUNT: 50000,
  MIN_SELL_RATIO: {
    H: 0.3,
    O: 0.3,
    U: 0.6,
    L: 0.5,
    K: 0.4,
    Z: 0.5,
    X: 0.6,
  },
  MAX_REPAIR_LIMIT: {
    1: 1000,
    2: 1000,
    3: 2000,
    4: 4000,
    5: 8000,
    6: 15000,
    7: 20000,
    8: 40000,
  },
  MIN_FORTIFY_LIMIT: {
    1: 0,
    2: 0,
    3: 0,
    4: 0,
    5: 0,
    6: 0,
    7: 0,
    8: 1000000,
  },
  MAX_FORTIFY_LIMIT: {
    1: 1000,
    2: 1000,
    3: 2000,
    4: 50000,
    5: 100000,
    6: 300000,
    7: 750000,
    8: 300000000,
  },
  MAX_FORTIFY_CONTAINER: 50000,
  LIMIT_URGENT_REPAIRING: 750,
  GAP_REPAIR_DECAYABLE: 800,
  MEMORY_RESYNC_INTERVAL: 500,
  PROCESS_ORDERS_INTERVAL: 500,
  TIME_REPORT: 28000,
  REPORT_MAX_LENGTH: 500,
  REPORTS_PER_LOOP: 18,
  SEND_STATISTIC_REPORTS: true,
  ROAD_CONSTRUCTION_ENABLE: false,
  ROAD_CONSTRUCTION_FORCED_ROOMS: {
    shard2: ['W46N18', 'W47N19', 'W49N19', 'W47N18', 'W48N16'],
  },
  ROAD_CONSTRUCTION_INTERVAL: 500,
  ROAD_CONSTRUCTION_MIN_DEVIATION: 1.2,
  ROAD_CONSTRUCTION_ABS_MIN: 3,
  TIME_ZONE: 8,
  USE_SUMMERTIME: true,
  SPAWN_DEFENSE_ON_ATTACK: true,
  MANAGED_CONTAINER_TRIGGER: 0.25,
  ROUTE_ROOM_COST: {
    shard2: { W46N18: 2, W47N19: 1, W49N19: 1, W47N18: 2, W48N16: 2 },
  },
  TRAVELLING_BORDER_RANGE: 22,
  NOTIFICATE_INVADER: false,
  NOTIFICATE_INTRUDER: true,
  NOTIFICATE_HOSTILES: true,
  COMBAT_CREEPS_RESPECT_RAMPARTS: false,
  COST_MATRIX_VALIDITY: 1000,
  CONSTRUCTION_PRIORITY: [
    STRUCTURE_SPAWN,
    STRUCTURE_EXTENSION,
    STRUCTURE_LINK,
    STRUCTURE_TERMINAL,
    STRUCTURE_STORAGE,
    STRUCTURE_TOWER,
    STRUCTURE_POWER_SPAWN,
    STRUCTURE_NUKER,
    STRUCTURE_OBSERVER,
    STRUCTURE_ROAD,
    STRUCTURE_CONTAINER,
    STRUCTURE_EXTRACTOR,
    STRUCTURE_LAB,
    STRUCTURE_WALL,
    STRUCTURE_RAMPART,
  ],
  CONTROLLER_SIGN: true,
  CONTROLLER_SIGN_MESSAGE: `Sign by ${_ME}`,
  CONTROLLER_SIGN_UPDATE: true,
  MINERS_AUTO_BUILD: true,
  MINER_WORK_THRESHOLD: 50,
  REMOTE_HAULER: {
    ALLOW_OVER_CAPACITY: 2450,
    DRIVE_BY_BUILD_ALL: false,
    DRIVE_BY_BUILD_RANGE: 1,
    DRIVE_BY_BUILDING: true,
    DRIVE_BY_REPAIR_RANGE: 0,
    MIN_LOAD: 0.75,
    MIN_WEIGHT: 800,
    MULTIPLIER: 4,
    REHOME: true,
  },
  TASK_CREEP_CHECK_INTERVAL: 250,
  REMOTE_RESERVE_HAUL_CAPACITY: 0.1,
  PIONEER_UNOWNED: false,
  DRIVE_BY_REPAIR_RANGE: 2,
  REMOTE_WORKER_MULTIPLIER: 1,
  PLAYER_WHITELIST: [],
  DEFENSE_BLACKLIST: [],
  CRITICAL_BUCKET_LEVEL: 1000,
  CRITICAL_BUCKET_OVERFILL: 200,
  CRITICAL_ROLES: [
    'worker',
    'collapseWorker',
    'melee',
    'ranger',
    'healer',
    'miner',
    'hauler',
    'upgrader',
  ],
  ROBBER_REHOME: false,
  OBSERVER_OBSERVE_RANGE: 3,
  OBSERVER_OBSERVE_HIGHWAYS_ONLY: true,
  COMPRESS_COST_MATRICES: false,
  ACTION_SAY: {
    ATTACK_CONTROLLER:
      String.fromCodePoint(0x1f5e1) + String.fromCodePoint(0x26f3),
    AVOIDING: String.fromCodePoint(0x21a9),
    BOOSTING: String.fromCodePoint(0x1f4aa),
    BUILDING: String.fromCodePoint(0x2692),
    BULLDOZING: String.fromCodePoint(0x1f69c),
    CHARGING: String.fromCodePoint(0x1f50c),
    CLAIMING: String.fromCodePoint(0x26f3),
    DEFENDING: String.fromCodePoint(0x2694),
    DISMANTLING: String.fromCodePoint(0x1f527),
    DROPPING: String.fromCodePoint(0x1f4a9),
    FEEDING: String.fromCodePoint(0x1f355),
    FORTIFYING: String.fromCodePoint(0x1f528),
    FUELING: String.fromCodePoint(0x26fd),
    GUARDING: String.fromCodePoint(0x1f46e) + String.fromCodePoint(0x1f3fc),
    HARVESTING: String.fromCodePoint(0x26cf),
    HEALING: String.fromCodePoint(0x26e8),
    IDLE: String.fromCodePoint(0x1f3b5),
    INVADING: String.fromCodePoint(0x1f52b),
    MINING: String.fromCodePoint(0x26cf),
    PICKING: String.fromCodePoint(0x23ec),
    REALLOCATING: String.fromCodePoint(0x2194),
    RECYCLING: String.fromCodePoint(0x267b),
    REPAIRING: String.fromCodePoint(0x1f528),
    RESERVING: String.fromCodePoint(0x26f3),
    ROBBING: String.fromCodePoint(0x1f480),
    STORING: String.fromCodePoint(0x1f4e5) + String.fromCodePoint(0xfe0e),
    TRAVELLING: String.fromCodePoint(0x1f3c3),
    UNCHARGING: String.fromCodePoint(0x1f50b),
    UPGRADING: String.fromCodePoint(0x1f5fd),
    WITHDRAWING: String.fromCodePoint(0x1f4e4) + String.fromCodePoint(0xfe0e),
    SAFEGEN: String.fromCodePoint(0x1f512),
  },
};
